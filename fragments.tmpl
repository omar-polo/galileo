{!
/*
 * Copyright (c) 2022 Omar Polo <op@omarpolo.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/tree.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <event.h>
#include <libgen.h>
#include <limits.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>

#include "galileo.h"
#include "tmpl.h"

static int tp_navigation(struct template *);

!}

{{ define tp_head(struct template *tp, const char *lang,
    const char *title) }}
{!
	struct client *clt = tp->tp_arg;
	struct proxy_config *pc = clt->clt_pc;
	const char *stylesheet = pc ? pc->stylesheet : "";
	const char *prfx = clt->clt_script_name;
	const char *path = clt->clt_path_info;
!}
<!doctype html>
<html{{ if *lang != '\0' }}{{ " " }}lang="{{ lang }}"{{ end }}>
	<head>
		<meta name="viewport" content="initial-scale=1" />

		{{ if *stylesheet == 0 }}
		<link rel="stylesheet" href="{{ prfx }}galileo.css" />
		{{ else }}
		<link rel="stylesheet" href="{{ stylesheet|urlescape }}" />
		{{ end }}

		<title>
			{{ if title }}
				{{ title }}
			{{ else if pc }}
				gemini://{{ pc->proxy_name }}{{ path }}
			{{ end }}
		</title>
	</head>
	<body>
		{{ if path }}
			{{ render tp_navigation(tp) }}
		{{ end }}
{{ end }}

{{ define tp_foot(struct template *tp) }}
{!
	struct client *clt = tp->tp_arg;
	struct proxy_config *pc = clt->clt_pc;
	const char *path = clt->clt_path_info;
!}
	{{ if pc }}
		<footer>
			<hr />
			<dl>
				<dt>Original URL:</dt>
				<dd>
<a href="gemini://{{ pc->proxy_name | urlescape }}{{ path | urlescape }}">
gemini://{{ pc->proxy_name }}{{ path }}
</a>
				</dd>
			</dl>
		</footer>
	{{ end }}
	</body>
</html>
{{ end }}

{{ define tp_navigation(struct template *tp) }}
{!
	struct client	*clt = tp->tp_arg;
	const char	*prfx = clt->clt_script_name;
	char		*path = clt->clt_path_info;
	char		*tilde, *t, home[GEMINI_MAXLEN], up[GEMINI_MAXLEN];
	char		*dname;
	char		 c;

	*home = '\0';
	if ((tilde = strstr(path, "/~")) != NULL &&
	    (t = strchr(tilde + 1, '/')) != NULL) {
		c = *++t;
		*t = '\0';
		(void) strlcpy(home, path + 1, sizeof(home));
		*t = c;
	}

	(void) strlcpy(up, path + 1, sizeof(up));
	dname = dirname(up);
!}
<header>
	<nav>
		<ul>
			<li><a href="{{ prfx }}">Root</a></li>

			{{ if *home != '\0' }}
			<li><a href="{{ prfx }}{{ home }}">Home</a></li>
			{{ end }}

			{{ if strcmp(dname, ".") != 0 }}
			<li><a href="{{ prfx }}{{ dname }}/">Up</a></li>
			{{ end }}
		</ul>
	</nav>
</header>
{{ end }}

{{ define tp_figure(struct template *tp, const char *url, const char *label) }}
<figure>
	<a href="{{ url | urlescape }}">
		<img src="{{ url | urlescape }}" />
	</a>
	<figcaption>
		{{ label }}
	</figcaption>
</figure>
{{ end }}

{{ define tp_pre_open(struct template *tp, const char *label) }}
<figure>
	{{ if label && *label != '\0' }}
		<figcaption>{{ label }}</figcaption>
	{{ end }}
	<pre>
{{ end }}

{{ define tp_pre_close(struct template *tp) }}
	</pre>
</figure>
{{ end }}

{{ define tp_error(struct template *tp, int code, const char *reason) }}
{!
	char	scode[32];
	int	r;

	r = snprintf(scode, sizeof(code), "%d", code);
	if (r < 0 || (size_t)r >= sizeof(code))
		return (0);

!}
	{{ render tp_head(tp, "en", "Proxy error") }}
	<main>
		<h1>Proxy error</h1>
		{{ if code != -1 }}
			<p>Request failed with code: <code>{{ scode }}</code>.</p>
			<p>The server says: {{ reason }}.</p>
		{{ else }}
			<p>Unable to serve the page due to: {{ reason }}.</p>
		{{ end }}
	</main>
	{{ render tp_foot(tp) }}
{{ end }}

{{ define tp_inputpage(struct template *tp, const char *prompt) }}
	{{ render tp_head(tp, "en", "input request") }}
	<p>The server ask for input: <q>{{ prompt }}</q>.</p>
	<form method="post" enctype="{{ FORM_URLENCODED }}">
		<label for="reply">{{ "response " }}</label>
		<input type="text" value="" id="reply" name="q" autofocus />
		{{ " " }}
		<button type="submit">Submit!</button>
	</form>
{{ render tp_foot(tp) }}
{{ end }}
